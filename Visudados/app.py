import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import io
import chardet
from PIL import Image
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import requests

# Configurar layout da p√°gina
st.set_page_config(
    page_title="Visualizador de Dados - VisuCSV",
    page_icon="üìä",
    layout="centered",
    initial_sidebar_state="expanded"
)

def mostrar_logo():
    logo = Image.open('logo1.png').convert("RGBA")
    logo = logo.resize((500, 500))  # Redimensiona a imagem para 200x200 pixels
    st.sidebar.image(logo, use_column_width=True)

# Fun√ß√£o para localizar colunas que cont√™m varia√ß√µes de "data" e aplicar formata√ß√£o

def formatar_coluna_data(dados):
    colunas_com_data = [coluna for coluna in dados.columns if 'data' in coluna.lower()]
    
    if colunas_com_data:
        # Se houver mais de uma coluna de data, permita que o usu√°rio escolha uma
        if len(colunas_com_data) > 1:
            st.sidebar.header("Sele√ß√£o da Coluna Data")
            coluna = st.sidebar.selectbox("Selecione a Coluna Data a ser considerada para an√°lise", colunas_com_data)
        else:
            # Se houver apenas uma coluna de data, use-a diretamente
            coluna = colunas_com_data[0]
            st.success(f"A coluna '{coluna}' foi automaticamente selecionada para an√°lise.")
        
        try:
            if dados[coluna].astype(str).str.match(r'^\d{6}$').all():
                dados['Data_Ajustada'] = pd.to_datetime(dados[coluna].astype(str), format='%Y%m', errors='coerce')
                st.success(f"Coluna '{coluna}' detectada no formato 'yyyymm' e convertida para data.")
            else:
                dados['Data_Ajustada'] = pd.to_datetime(dados[coluna], errors='coerce')

            dados['Ano'] = dados['Data_Ajustada'].dt.strftime('%Y')
            dados['Semestre'] = np.where(dados['Data_Ajustada'].dt.month <= 6, 1, 2)
            dados['Trimestre'] = ((dados['Data_Ajustada'].dt.month - 1) // 3) + 1
            dados['M√™s-Ano'] = dados['Data_Ajustada'].dt.strftime('%m/%Y')
            dados['Data_Ajustada'] = dados['Data_Ajustada'].dt.strftime('%d/%m/%Y')
            #dados = dados.drop(columns=[coluna])

        except Exception as e:
            st.warning(f"N√£o foi poss√≠vel converter a coluna '{coluna}' para data: {e}")
    else:
        st.warning("Nenhuma coluna de data encontrada.")
    
    return dados


def principal():
    st.title("üìä An√°lise de Dados com VisuCSV")
    mostrar_logo()

    st.header("Carregue ou forne√ßa a URL do arquivo de dados")

    # Inicializa o session state se n√£o existir
    if 'url_csv' not in st.session_state:
        st.session_state.url_csv = ""

    # Op√ß√£o de carregar um arquivo CSV
    arquivo_csv = st.file_uploader("Carregar arquivo CSV.", type=["csv"], help="Envie seu arquivo CSV aqui")

    # Op√ß√£o de fornecer uma URL para o CSV
    url_csv = st.text_input("Ou insira a URL do arquivo CSV.", help="Informe a URL para fazer o download do CSV")
    dados = None

    # Bot√µes para carregar bases fict√≠cias
    st.write("### üìÇ Bases Fict√≠cias:")
    if st.button("Base 1"):
        st.session_state.url_csv = "https://drive.google.com/uc?id=1FLNVucw0ObcbE6PLoK4hxXV4pPQFqiN7"
        st.success(f"URL selecionada: {st.session_state.url_csv}")

    if st.button("Base 2"):
        st.session_state.url_csv = "https://drive.google.com/uc?id=1w_k9ZWPDGiZyZWCaZhTx7lMMTInwlsKP"
        st.success(f"URL selecionada: {st.session_state.url_csv}")

    # Se a URL n√£o estiver vazia, usa a URL do session state
    if st.session_state.url_csv:
        url_csv = st.session_state.url_csv
        

##
    def detectar_delimitador(conteudo_csv):
        delimitadores = [';', ',', '\t', '|', ' ']
        
        for delimitador in delimitadores:
            try:
                dados = pd.read_csv(io.StringIO(conteudo_csv), sep=delimitador)
                if len(dados.columns) > 1:
                    return dados
            except Exception as e:
                st.warning(f"Erro ao tentar ler com o delimitador '{delimitador}': {e}")
                continue
        return None

    if arquivo_csv is not None:
        # Tentar detectar a codifica√ß√£o do arquivo CSV
        codificacao = chardet.detect(arquivo_csv.getvalue())['encoding']
        conteudo_csv = arquivo_csv.getvalue().decode(codificacao)
        dados = detectar_delimitador(conteudo_csv)

        if dados is None or len(dados.columns) == 1:
            st.warning("Falha na detec√ß√£o autom√°tica do delimitador. Por favor, selecione o delimitador correto.")
            delimitador_escolhido = st.selectbox("Escolha o delimitador", [';', ',', '\t', '|', ' '])
            try:
                dados = pd.read_csv(io.StringIO(conteudo_csv), sep=delimitador_escolhido)
            except Exception as e:
                st.error(f"Erro ao ler o arquivo CSV: {e}")
                return

    elif url_csv:
        try:
            response = requests.get(url_csv)
            response.raise_for_status()  # Verificar se houve erro no download
            conteudo_csv = response.content  # Pegar o conte√∫do bruto

            # Detectar codifica√ß√£o do conte√∫do baixado
            codificacao = chardet.detect(conteudo_csv)['encoding']
            conteudo_csv = conteudo_csv.decode(codificacao)

            dados = detectar_delimitador(conteudo_csv)

            if dados is None or len(dados.columns) == 1:
                st.warning("Falha na detec√ß√£o autom√°tica do delimitador. Por favor, selecione o delimitador correto.")
                delimitador_escolhido = st.selectbox("Escolha o delimitador", [';', ',', '\t', '|', ' '])
                try:
                    dados = pd.read_csv(io.StringIO(conteudo_csv), sep=delimitador_escolhido)
                except Exception as e:
                    st.error(f"Erro ao ler o arquivo CSV: {e}")
                    return

            st.success(f"Arquivo CSV baixado com sucesso da URL fornecida.")
        except Exception as e:
            st.error(f"Erro ao baixar ou processar o arquivo CSV da URL: {e}")
            return
    
    if dados is not None:
        dadosorigem = dados.copy()
        # Aplicar a formata√ß√£o nas colunas de data
        dados1 = formatar_coluna_data(dados)

        # Exibir uma tabela interativa
        st.write("### Tabela de dados (com os 5 primeiros registros):")
        st.dataframe(dados1.head(), use_container_width=True, hide_index=True)

        

        # Estat√≠sticas descritivas
        desc = dados1.describe()

        # Adicionando legendas personalizadas
        legendas = {
            
            'mean': 'M√©dia',
            'std': 'Desvio Padr√£o',
            'min': 'M√≠nimo',
            '25%': '1¬∫ Quartil',
            '50%': 'Mediana (2¬∫ Quartil)',
            '75%': '3¬∫ Quartil',
            'max': 'M√°ximo'
        }
        # Remover a linha 'count' (N√∫mero de Linhas V√°lidas)
        desc = desc.drop('count')


        # Renomeando as linhas com as legendas
        desc.rename(index=legendas, inplace=True)

        # Definir o n√∫mero de linhas e colunas
        num_linhas = dadosorigem.shape[0]
        num_colunas = dadosorigem.shape[1]

        # Criando um DataFrame com o n√∫mero de linhas e colunas
        info_adicional = pd.DataFrame({
            'N√∫mero de Linhas': [num_linhas],
            'N√∫mero de Colunas': [num_colunas]
        })

        # Exibindo as informa√ß√µes no Streamlit
        st.write("### Estat√≠sticas Descritivas:")
        st.write(f"**N√∫mero de Linhas:** {num_linhas}")
        st.write(f"**N√∫mero de Colunas:** {num_colunas}")

        # Exibindo as estat√≠sticas descritivas
        st.write(desc)




        # Se√ß√£o de visualiza√ß√µes
        st.sidebar.header("Visualiza√ß√µes")
        opcoes_graficos = [
            "Gr√°fico de Barras 1","Gr√°fico de Barras 2", 
            "Gr√°fico de Barras 3", "Gr√°fico de Pizza", 
            "Gr√°fico de Linhas 1","Gr√°fico de Linhas 2",
            "Gr√°fico de Linhas 3", 
            
        ]
        grafico_selecionado = st.sidebar.selectbox("Escolha um tipo de gr√°fico", opcoes_graficos)

        sns.set(style="whitegrid")

        # Escolha da paleta de cores
        paletas = {
            "Viridis": "viridis",
            "Blues": "Blues",
            "Pastel": "pastel",
            "Colorblind": "colorblind",
            "Dark": "dark"
        }
        paleta_escolhida = st.sidebar.selectbox("Escolha a paleta de cores", list(paletas.keys()))
        sns.set_palette(paletas[paleta_escolhida])

        # Ajuste do tamanho do gr√°fico com um √∫nico slider
        tamanho_grafico = st.sidebar.slider("Tamanho do Gr√°fico (5 a 15)", min_value=5, max_value=15, value=10)
        largura = tamanho_grafico
        altura = tamanho_grafico * 0.6  # Ajustando a altura para ser proporcional √† largura
          
        # Fun√ß√£o para formatar o eixo y como moeda brasileira
        def formatar_moeda(valor, pos):
            return f'R${valor:,.2f}'.replace(',', 'X').replace('.', ',').replace('X', '.')

        # Fun√ß√£o para formatar quantidade sem casas decimais
        def formatar_quantidade(valor, pos):
            return f'{int(valor):,}'.replace(',', '.')
        
        
                # Gr√°fico de Barras 1
        if grafico_selecionado == "Gr√°fico de Barras 1":
            eixo_x = st.sidebar.selectbox("Selecione o eixo x", dados.columns)
            eixo_y = st.sidebar.selectbox("Selecione o eixo y", dados.columns)
            tipo_aggregacao = st.sidebar.selectbox("Selecione o tipo de agrega√ß√£o", ["Total", "M√©dia"])
            
            st.write("### Gr√°fico de Barras 1:")

            # Criando a figura e o eixo
            figura, ax = plt.subplots(figsize=(10, 6))

            # Verificar se o eixo y cont√©m valores num√©ricos
            if dados[eixo_y].dtype not in [np.int64, np.float64]:
                st.warning(f"A coluna '{eixo_y}' do eixo Y cont√©m valores n√£o num√©ricos. Os r√≥tulos n√£o ser√£o exibidos.")
            else:
                # Agregando os dados de acordo com a escolha do usu√°rio
                if tipo_aggregacao == "M√©dia":
                    dados_agregados = dados.groupby(eixo_x)[eixo_y].mean().reset_index()
                else:  # Total
                    dados_agregados = dados.groupby(eixo_x)[eixo_y].sum().reset_index()

                # Criando o gr√°fico de barras horizontal
                sns.barplot(y=dados_agregados[eixo_x], x=dados_agregados[eixo_y], ax=ax, palette=paletas[paleta_escolhida], alpha=0.8, ci=None, orient='h')
                
                # Adiciona legendas ao final das barras
                for p in ax.patches:
                    valor_x = p.get_width()

                    # Verifica se o eixo y deve ser formatado como moeda ou quantidade
                    if "R$" in dados[eixo_y].name or "valor" in eixo_y.lower():
                        ax.annotate(formatar_moeda(valor_x, None),  # Formata√ß√£o de moeda
                                    (valor_x, p.get_y() + p.get_height() / 2), 
                                    ha='left', va='center', fontsize=10, color='black', rotation=0)  # Rota√ß√£o a 0¬∫
                    else:
                        ax.annotate(formatar_quantidade(valor_x, None),  # Formata√ß√£o de quantidade
                                    (valor_x, p.get_y() + p.get_height() / 2), 
                                    ha='left', va='center', fontsize=10, color='black', rotation=0)  # Rota√ß√£o a 0¬∫

                # Ajustar limite do eixo x para evitar que valores transponham a grade de fundo
                ax.set_xlim(0, ax.get_xlim()[1] * 1.5)  # Aumenta o limite superior em 50%

                # Formata eixo x como moeda ou quantidade
                if "R$" in dados[eixo_y].name or "valor" in eixo_y.lower():
                    ax.xaxis.set_major_formatter(FuncFormatter(formatar_moeda))
                else:
                    ax.xaxis.set_major_formatter(FuncFormatter(formatar_quantidade))

                # Ajustando t√≠tulo e r√≥tulos
                ax.set_title(f'Gr√°fico de Barras: {tipo_aggregacao} de {eixo_y} por {eixo_x}', fontsize=16)
                ax.set_xlabel(eixo_y, fontsize=14)
                ax.set_ylabel("")  # Oculta o r√≥tulo do eixo Y

                # Melhorando a visualiza√ß√£o
                ax.grid(True, linestyle='--', alpha=0.7)  # Adicionando uma grade com estilo

                # Ajustar automaticamente o layout para evitar que elementos fiquem fora da √°rea vis√≠vel
                plt.tight_layout()
                # Ocultando todos os r√≥tulos do eixo X
                ax.set_xticklabels([])

                # Exibindo o gr√°fico no Streamlit
                st.pyplot(figura)

        
        # Verifica se o gr√°fico selecionado √© "Gr√°fico de Barras 2"
        if grafico_selecionado == "Gr√°fico de Barras 2":
            eixo_x = st.sidebar.selectbox("Selecione o eixo x", dados.columns)
            eixo_y = st.sidebar.selectbox("Selecione o eixo y", dados.columns)
            tipo_aggregacao = st.sidebar.selectbox("Selecione o tipo de agrega√ß√£o", ["Total", "M√©dia"])
            
            st.write("### Gr√°fico de Barras 2:")

            # Criando a figura e o eixo
            figura, ax = plt.subplots(figsize=(largura, altura))

            # Verificar se o eixo y cont√©m valores num√©ricos
            if dados[eixo_y].dtype not in [np.int64, np.float64]:
                st.warning(f"A coluna '{eixo_y}' do eixo Y cont√©m valores n√£o num√©ricos. Os r√≥tulos n√£o ser√£o exibidos.")
            else:
                # Agregando os dados de acordo com a escolha do usu√°rio
                if tipo_aggregacao == "M√©dia":
                    dados_agregados = dados.groupby(eixo_x)[eixo_y].mean().reset_index()
                else:  # Total
                    dados_agregados = dados.groupby(eixo_x)[eixo_y].sum().reset_index()

                # Criando o gr√°fico de barras sem a barra de erro (ci=None remove o erro padr√£o)
                sns.barplot(x=dados_agregados[eixo_x], y=dados_agregados[eixo_y], ax=ax, palette=paletas[paleta_escolhida], alpha=0.8, ci=None)

                # Adiciona legendas acima das barras
                for p in ax.patches:
                    valor_y = p.get_height()

                    # Verifica se o eixo y deve ser formatado como moeda ou quantidade
                    if "R$" in dados[eixo_y].name or "valor" in eixo_y.lower():
                        ax.annotate(formatar_moeda(valor_y, None),  # Formata√ß√£o de moeda
                                    (p.get_x() + p.get_width() / 2., valor_y), 
                                    ha='center', va='bottom', fontsize=10, color='black', rotation=0)  # Rota√ß√£o dos valores
                    else:
                        ax.annotate(formatar_quantidade(valor_y, None),  # Formata√ß√£o de quantidade sem casas decimais
                                    (p.get_x() + p.get_width() / 2., valor_y), 
                                    ha='center', va='bottom', fontsize=10, color='black', rotation=0)  # Rota√ß√£o dos valores

                # Ajustar limite do eixo y para evitar que valores transponham a grade de fundo
                ax.set_ylim(0, ax.get_ylim()[1] * 1.5)  # Aumenta o limite superior em 50%

                # Formata eixo y como moeda ou quantidade
                if "R$" in dados[eixo_y].name or "valor" in eixo_y.lower():
                    ax.yaxis.set_major_formatter(FuncFormatter(formatar_moeda))
                else:
                    ax.yaxis.set_major_formatter(FuncFormatter(formatar_quantidade))

                # Ajustando t√≠tulo e r√≥tulos
                ax.set_title(f'Gr√°fico de Barras: {tipo_aggregacao} de {eixo_y} por {eixo_x}', fontsize=16)
                ax.set_xlabel(eixo_x, fontsize=14)
                ax.set_ylabel(eixo_y, fontsize=14)

                # Melhorando a visualiza√ß√£o
                plt.xticks(rotation=45)  # Girando r√≥tulos do eixo x para melhor leitura
                ax.grid(True, linestyle='--', alpha=0.7)  # Adicionando uma grade com estilo

                # Ajustar automaticamente o layout para evitar que elementos fiquem fora da √°rea vis√≠vel
                plt.tight_layout()

                # Ocultando r√≥tulos "0" ou "R$0,00"
                labels = [item.get_text() for item in ax.get_xticklabels()]
                labels = ['' if label in ['0', 'R$0,00'] else label for label in labels]
                ax.set_xticklabels(labels)

                # Exibindo o gr√°fico no Streamlit
                st.pyplot(figura)


        # Repetir a mesma l√≥gica para Gr√°fico de Barras 3
        if grafico_selecionado == "Gr√°fico de Barras 3":
            eixo_x = st.sidebar.selectbox("Selecione o eixo x", dados.columns)  # Coluna para o eixo x (ex: M√™s)
            eixo_valor = st.sidebar.selectbox("Selecione o eixo y (Valores)", dados.columns)  # Coluna para os valores
            eixo_produto = st.sidebar.selectbox("Selecione o eixo z (Produtos)", dados.columns)  # Coluna para produtos
            st.write("### Gr√°fico de Barras 3:")

            # Verificar se a coluna selecionada para o eixo Y cont√©m valores num√©ricos
            if not pd.api.types.is_numeric_dtype(dados[eixo_valor]):
                st.warning(f"A coluna '{eixo_valor}' n√£o cont√©m valores num√©ricos. O gr√°fico n√£o pode ser gerado.")
            else:
                figura, ax = plt.subplots(figsize=(largura, altura))

                # Calcular o total de vendas por m√™s
                totais_por_mes = dados.groupby(eixo_x)[eixo_valor].sum().reset_index()

                # Criando o gr√°fico de barras com os totais
                sns.barplot(x=eixo_x, y=eixo_valor, data=totais_por_mes, ax=ax, palette=paletas[paleta_escolhida], alpha=0.8)

                # Adiciona legendas acima das barras (apenas para o valor total)
                for p in ax.patches:
                    valor_y = p.get_height()
                    
                    # Verifica se o valor_y √© zero antes de adicionar a anota√ß√£o
                    if valor_y > 0:  # Verifica se o valor √© maior que 0
                        # Verifica se o eixo y deve ser formatado como moeda ou quantidade
                        if "R$" in dados[eixo_valor].name or "valor" in eixo_valor.lower():
                            # Ajusta o deslocamento do texto para afast√°-lo da barra
                            ax.annotate(formatar_moeda(valor_y, None),
                                        (p.get_x() + p.get_width() / 2., valor_y + 0.1 * valor_y),  # Aumente aqui para afastar o texto
                                        ha='right', va='bottom', fontsize=10, color='black', rotation=90)
                        else:
                            ax.annotate(formatar_quantidade(valor_y, None),
                                        (p.get_x() + p.get_width() / 2., valor_y + 0.1 * valor_y),  # Aumente aqui para afastar o texto
                                        ha='right', va='bottom', fontsize=10, color='black', rotation=90)

                # Calcular a m√©dia de vendas por categoria (m√™s)
                medias_por_categoria = dados.groupby(eixo_x)[eixo_valor].mean().reset_index()

                # Adicionar os valores m√©dios apenas nos marcadores da linha m√©dia
                media_y_values = []  # Lista para armazenar os valores m√©dios
                for i in range(len(medias_por_categoria)):
                    media_y = medias_por_categoria[eixo_valor].iloc[i]  # M√©dia para a categoria correspondente
                    media_y_values.append(media_y)  # Armazenar o valor m√©dio
                    
                    # Formatar a m√©dia de acordo com o tipo de dado
                    if "R$" in dados[eixo_valor].name or "valor" in eixo_valor.lower():
                        media_text = formatar_moeda(media_y, None)
                    else:
                        media_text = formatar_quantidade(media_y, None)

                # Ajustar limite do eixo y para evitar que valores transponham a grade de fundo
                ax.set_ylim(0, ax.get_ylim()[1] * 1.5)  # Aumenta o limite superior em 20%

                # Formata eixo y como moeda ou quantidade
                if "R$" in dados[eixo_valor].name or "valor" in eixo_valor.lower():
                    ax.yaxis.set_major_formatter(FuncFormatter(formatar_moeda))
                else:
                    ax.yaxis.set_major_formatter(FuncFormatter(formatar_quantidade))

                # Tra√ßar a linha m√©dia e adicionar os valores m√©dios pr√≥ximos aos marcadores
                ax.plot(medias_por_categoria[eixo_x], media_y_values, color='blue', marker='o', linestyle='-', linewidth=2, label='M√©dia', alpha=0.7)

                for i, media_y in enumerate(media_y_values):
                    ax.text(medias_por_categoria[eixo_x].iloc[i], media_y + 0.3 * media_y, f'{media_text}', color='blue', ha='left', fontsize=8, rotation=90, verticalalignment='bottom')               

                # Ajustando t√≠tulo e r√≥tulos
                ax.set_title(f'Gr√°fico de Barras: {eixo_valor} por {eixo_x}', fontsize=16)
                ax.set_xlabel(eixo_x, fontsize=14)
                ax.set_ylabel(eixo_valor, fontsize=14)

                # Melhorando a visualiza√ß√£o
                plt.xticks(rotation=45)  # Girando r√≥tulos do eixo x para 45 graus
                ax.grid(True, linestyle='--', alpha=0.7)  # Adicionando uma grade com estilo
                ax.legend(loc='upper left')  # Adiciona a legenda apenas uma vez

                # Exibindo o gr√°fico no Streamlit
                st.pyplot(figura)


        # Gr√°fico de Dispers√£o
        elif grafico_selecionado == "Gr√°fico de Dispers√£o":
            eixo_x = st.sidebar.selectbox("Selecione o eixo x", dados.columns)
            eixo_y = st.sidebar.selectbox("Selecione o eixo y", dados.columns)
            st.write("### Gr√°fico de Dispers√£o:")
            
            figura, ax = plt.subplots(figsize=(largura, altura))

            # Adicionando o gr√°fico de dispers√£o
            sns.scatterplot(x=dados[eixo_x], y=dados[eixo_y], ax=ax,
                            hue=dados[eixo_y].astype(str),  # Converte o eixo Y para string para colorir
                            size=dados[eixo_y],  # Ajusta o tamanho dos pontos baseado no eixo Y
                            sizes=(20, 200),  # Define os tamanhos m√≠nimo e m√°ximo dos pontos
                            palette=paletas[paleta_escolhida],  # Usa a paleta de cores selecionada
                            alpha=0.7,  # Define a transpar√™ncia dos pontos
                            edgecolor='w',  # Define a cor da borda dos pontos
                            linewidth=0.5)  # Define a largura da borda dos pontos

            # Ajustando t√≠tulos e r√≥tulos
            ax.set_title(f'Gr√°fico de Dispers√£o: {eixo_x} vs {eixo_y}', fontsize=16)
            ax.set_xlabel(eixo_x, fontsize=14)
            ax.set_ylabel(eixo_y, fontsize=14)

            # Melhorando a visualiza√ß√£o
            ax.grid(True, linestyle='--', alpha=0.7)  # Adicionando uma grade com estilo
            plt.xticks(rotation=45)  # Girando os r√≥tulos do eixo x para melhor legibilidade

            st.pyplot(figura)


      # Histograma
        elif grafico_selecionado == "Histograma":
            # Filtrando as colunas num√©ricas
            colunas_numericas = dados.select_dtypes(include='number').columns
            
            coluna = st.sidebar.selectbox("Selecione a coluna num√©rica", colunas_numericas)
            
            # Permitir que o usu√°rio escolha o n√∫mero de bins
            num_bins = st.sidebar.slider("N√∫mero de Bins", min_value=5, max_value=100, value=30)
            
            st.write("### Histograma:")
            figura, ax = plt.subplots(figsize=(largura, altura))
            
            # Adicionando o histograma com KDE
            sns.histplot(dados[coluna], bins=num_bins, kde=True, ax=ax, palette=paletas[paleta_escolhida],
                        edgecolor='black', alpha=0.6)  # Adiciona contorno preto √†s barras

            # Estilizando t√≠tulo e r√≥tulos
            ax.set_title(f'Histograma de {coluna}', fontsize=18, fontweight='bold')
            ax.set_xlabel(coluna, fontsize=14, fontweight='bold')
            ax.set_ylabel('Frequ√™ncia', fontsize=14, fontweight='bold')

            # Adicionando a m√©dia e a mediana
            media = dados[coluna].mean()
            mediana = dados[coluna].median()
            ax.axvline(media, color='red', linestyle='dashed', linewidth=1.5, label='M√©dia')
            ax.axvline(mediana, color='blue', linestyle='dashed', linewidth=1.5, label='Mediana')
            
            ax.legend()  # Adiciona a legenda

            # Melhorando a visualiza√ß√£o
            ax.grid(True, linestyle='--', alpha=0.5)  # Adiciona uma grade com estilo
            plt.xticks(rotation=45)  # Girar os r√≥tulos do eixo X para melhor legibilidade

            st.pyplot(figura)



        # Box Plot
        elif grafico_selecionado == "Box Plot":
            eixo_x = st.sidebar.selectbox("Selecione o eixo x", dados.columns)
            eixo_y = st.sidebar.selectbox("Selecione o eixo y", dados.columns)
            st.write("### Box Plot:")

            figura, ax = plt.subplots(figsize=(largura, altura))

            # Box plot com paleta de cores personalizada
            sns.boxplot(x=dados[eixo_x], y=dados[eixo_y], ax=ax, palette=paletas[paleta_escolhida])

            # Configura√ß√µes visuais adicionais
            ax.set_title(f'Box Plot de {eixo_y} por {eixo_x}', fontsize=16, weight='bold')
            ax.set_xlabel(eixo_x, fontsize=14)
            ax.set_ylabel(eixo_y, fontsize=14)

            # Adicionando grid para facilitar a leitura
            ax.grid(True, linestyle='--', alpha=0.6)

            # Girar r√≥tulos no eixo x se necess√°rio para melhor visualiza√ß√£o
            plt.xticks(rotation=45)

            st.pyplot(figura)
 
        # Gr√°fico de Linhas 1
       # Verifica se o gr√°fico selecionado √© "Gr√°fico de Linhas 2"
        elif grafico_selecionado == "Gr√°fico de Linhas 1":
            eixo_x = st.sidebar.selectbox("Selecione o eixo x", dados.columns)
            eixo_y = st.sidebar.selectbox("Selecione o eixo y", dados.columns)
            tipo_aggregacao = st.sidebar.selectbox("Selecione o tipo de agrega√ß√£o", ["Total", "M√©dia"])
            
            st.write("### Gr√°fico de Linhas 1:")

            # Criando a figura e o eixo
            figura, ax = plt.subplots(figsize=(largura, altura))

            # Verificar se o eixo y cont√©m valores num√©ricos
            if dados[eixo_y].dtype not in [np.int64, np.float64]:
                st.warning(f"A coluna '{eixo_y}' do eixo Y cont√©m valores n√£o num√©ricos. Os r√≥tulos n√£o ser√£o exibidos.")
            else:
                # Agregando os dados de acordo com a escolha do usu√°rio
                if tipo_aggregacao == "M√©dia":
                    dados_agregados = dados.groupby(eixo_x)[eixo_y].mean().reset_index()
                    valor_resumo = dados_agregados[eixo_y].mean()  # Calcula a m√©dia total
                    valor_label = f"M√©dia: {formatar_moeda(valor_resumo, None)}"
                else:  # Total
                    dados_agregados = dados.groupby(eixo_x)[eixo_y].sum().reset_index()
                    valor_resumo = dados_agregados[eixo_y].sum()  # Calcula o total
                    valor_label = f"Total: {formatar_moeda(valor_resumo, None)}"

                # Criando o gr√°fico de linhas
                sns.lineplot(x=dados_agregados[eixo_x], y=dados_agregados[eixo_y], ax=ax, palette=paletas[paleta_escolhida], marker='o', label=valor_label)

                # Ajustar limite do eixo y para evitar que valores transponham a grade de fundo
                ax.set_ylim(0, ax.get_ylim()[1] * 1.1)  # Aumenta o limite superior em 10%

                # Formata eixo y como moeda ou quantidade
                if "R$" in dados[eixo_y].name or "valor" in eixo_y.lower():
                    ax.yaxis.set_major_formatter(FuncFormatter(formatar_moeda))
                else:
                    ax.yaxis.set_major_formatter(FuncFormatter(formatar_quantidade))

                # Ajustando t√≠tulo e r√≥tulos
                ax.set_title(f'Gr√°fico de Linhas: {tipo_aggregacao} de {eixo_y} por {eixo_x}', fontsize=16)
                ax.set_xlabel(eixo_x, fontsize=14)
                ax.set_ylabel(eixo_y, fontsize=14)

                # Melhorando a visualiza√ß√£o
                plt.xticks(rotation=45)  # Girando r√≥tulos do eixo x para melhor leitura
                ax.grid(True, linestyle='--', alpha=0.7)  # Adicionando uma grade com estilo

                # Adiciona a legenda
                ax.legend()

                # Ajustar automaticamente o layout para evitar que elementos fiquem fora da √°rea vis√≠vel
                plt.tight_layout()

                # Ocultando r√≥tulos "0" ou "R$0,00"
                labels = [item.get_text() for item in ax.get_xticklabels()]
                labels = ['' if label in ['0', 'R$0,00'] else label for label in labels]
                ax.set_xticklabels(labels)

                # Exibindo o gr√°fico no Streamlit
                st.pyplot(figura)


       # Verifica se o gr√°fico selecionado √© "Gr√°fico de Linhas"
        elif grafico_selecionado == "Gr√°fico de Linhas 2":
            eixo_x = st.sidebar.selectbox("Selecione o eixo x", dados.columns)
            eixo_y = st.sidebar.selectbox("Selecione o eixo y", dados.columns)
            tipo_aggregacao = st.sidebar.selectbox("Selecione o tipo de agrega√ß√£o", ["Total", "M√©dia"])
            
            st.write("### Gr√°fico de Linhas 2:")

            # Criando a figura e o eixo
            figura, ax = plt.subplots(figsize=(largura, altura))

            # Verificar se o eixo y cont√©m valores num√©ricos
            if dados[eixo_y].dtype not in [np.int64, np.float64]:
                st.warning(f"A coluna '{eixo_y}' do eixo Y cont√©m valores n√£o num√©ricos. Os r√≥tulos n√£o ser√£o exibidos.")
            else:
                # Agregando os dados de acordo com a escolha do usu√°rio
                if tipo_aggregacao == "M√©dia":
                    dados_agregados = dados.groupby(eixo_x)[eixo_y].mean().reset_index()
                else:  # Total
                    dados_agregados = dados.groupby(eixo_x)[eixo_y].sum().reset_index()

                # Criando o gr√°fico de linhas
                sns.lineplot(x=dados_agregados[eixo_x], y=dados_agregados[eixo_y], ax=ax, palette=paletas[paleta_escolhida], marker='o')

                # Adiciona legendas nos pontos da linha
                for x, y in zip(dados_agregados[eixo_x], dados_agregados[eixo_y]):
                    # Verifica se o eixo y deve ser formatado como moeda ou quantidade
                    if "R$" in dados[eixo_y].name or "valor" in eixo_y.lower():
                        ax.annotate(formatar_moeda(y, None),  # Formata√ß√£o de moeda
                                    (x, y), 
                                    ha='center', va='bottom', fontsize=10, color='black')  # R√≥tulos acima dos pontos
                    else:
                        ax.annotate(formatar_quantidade(y, None),  # Formata√ß√£o de quantidade
                                    (x, y), 
                                    ha='center', va='bottom', fontsize=10, color='black')  # R√≥tulos acima dos pontos

                # Ajustar limite do eixo y para evitar que valores transponham a grade de fundo
                ax.set_ylim(0, ax.get_ylim()[1] * 1.1)  # Aumenta o limite superior em 10%

                # Formata eixo y como moeda ou quantidade
                if "R$" in dados[eixo_y].name or "valor" in eixo_y.lower():
                    ax.yaxis.set_major_formatter(FuncFormatter(formatar_moeda))
                else:
                    ax.yaxis.set_major_formatter(FuncFormatter(formatar_quantidade))

                # Ajustando t√≠tulo e r√≥tulos
                ax.set_title(f'Gr√°fico de Linhas: {tipo_aggregacao} de {eixo_y} por {eixo_x}', fontsize=16)
                ax.set_xlabel(eixo_x, fontsize=14)
                ax.set_ylabel(eixo_y, fontsize=14)

                # Melhorando a visualiza√ß√£o
                plt.xticks(rotation=45)  # Girando r√≥tulos do eixo x para melhor leitura
                ax.grid(True, linestyle='--', alpha=0.7)  # Adicionando uma grade com estilo

                # Ajustar automaticamente o layout para evitar que elementos fiquem fora da √°rea vis√≠vel
                plt.tight_layout()

                # Ocultando r√≥tulos "0" ou "R$0,00"
                labels = [item.get_text() for item in ax.get_xticklabels()]
                labels = ['' if label in ['0', 'R$0,00'] else label for label in labels]
                ax.set_xticklabels(labels)

                # Exibindo o gr√°fico no Streamlit
                st.pyplot(figura)

        # Verifica se o gr√°fico selecionado √© "Gr√°fico de Linhas"
        elif grafico_selecionado == "Gr√°fico de Linhas 3":
            eixo_x = st.sidebar.selectbox("Selecione o eixo x", dados.columns)
            eixo_y = st.sidebar.selectbox("Selecione o eixo y", dados.columns)
            tipo_aggregacao = st.sidebar.selectbox("Selecione o tipo de agrega√ß√£o", ["Total", "M√©dia"])
            
            st.write("### Gr√°fico de Linhas 3:")

            # Criando a figura e o eixo
            figura, ax = plt.subplots(figsize=(largura, altura))

            # Verificar se o eixo y cont√©m valores num√©ricos
            if dados[eixo_y].dtype not in [np.int64, np.float64]:
                st.warning(f"A coluna '{eixo_y}' do eixo Y cont√©m valores n√£o num√©ricos. Os r√≥tulos n√£o ser√£o exibidos.")
            else:
                # Agregando os dados de acordo com a escolha do usu√°rio
                if tipo_aggregacao == "M√©dia":
                    dados_agregados = dados.groupby(eixo_x)[eixo_y].mean().reset_index()
                    valor_resumo = dados_agregados[eixo_y].mean()  # Calcula a m√©dia total
                    valor_label = f"M√©dia: {formatar_moeda(valor_resumo, None)}"
                else:  # Total
                    dados_agregados = dados.groupby(eixo_x)[eixo_y].sum().reset_index()
                    valor_resumo = dados_agregados[eixo_y].sum()  # Calcula o total
                    valor_label = f"Total: {formatar_moeda(valor_resumo, None)}"

                # Criando o gr√°fico de linhas
                sns.lineplot(x=dados_agregados[eixo_x], y=dados_agregados[eixo_y], ax=ax, palette=paletas[paleta_escolhida], marker='o', label=valor_label)

                # Adiciona legendas nos pontos da linha
                for x, y in zip(dados_agregados[eixo_x], dados_agregados[eixo_y]):
                    # Verifica se o eixo y deve ser formatado como moeda ou quantidade
                    if "R$" in dados[eixo_y].name or "valor" in eixo_y.lower():
                        ax.annotate(formatar_moeda(y, None),  # Formata√ß√£o de moeda
                                    (x, y), 
                                    ha='center', va='bottom', fontsize=10, color='black')  # R√≥tulos acima dos pontos
                    else:
                        ax.annotate(formatar_quantidade(y, None),  # Formata√ß√£o de quantidade
                                    (x, y), 
                                    ha='center', va='bottom', fontsize=10, color='black')  # R√≥tulos acima dos pontos

                # Ajustar limite do eixo y para evitar que valores transponham a grade de fundo
                ax.set_ylim(0, ax.get_ylim()[1] * 1.1)  # Aumenta o limite superior em 10%

                # Formata eixo y como moeda ou quantidade
                if "R$" in dados[eixo_y].name or "valor" in eixo_y.lower():
                    ax.yaxis.set_major_formatter(FuncFormatter(formatar_moeda))
                else:
                    ax.yaxis.set_major_formatter(FuncFormatter(formatar_quantidade))

                # Ajustando t√≠tulo e r√≥tulos
                ax.set_title(f'Gr√°fico de Linhas: {tipo_aggregacao} de {eixo_y} por {eixo_x}', fontsize=16)
                ax.set_xlabel(eixo_x, fontsize=14)
                ax.set_ylabel(eixo_y, fontsize=14)

                # Melhorando a visualiza√ß√£o
                plt.xticks(rotation=45)  # Girando r√≥tulos do eixo x para melhor leitura
                ax.grid(True, linestyle='--', alpha=0.7)  # Adicionando uma grade com estilo

                # Adiciona a legenda
                ax.legend()

                # Ajustar automaticamente o layout para evitar que elementos fiquem fora da √°rea vis√≠vel
                plt.tight_layout()

                # Ocultando r√≥tulos "0" ou "R$0,00"
                labels = [item.get_text() for item in ax.get_xticklabels()]
                labels = ['' if label in ['0', 'R$0,00'] else label for label in labels]
                ax.set_xticklabels(labels)

                # Exibindo o gr√°fico no Streamlit
                st.pyplot(figura)



        # Gr√°fico de Violino
        elif grafico_selecionado == "Gr√°fico de Violino":
            eixo_x = st.sidebar.selectbox("Selecione o eixo x", dados.columns)
            eixo_y = st.sidebar.selectbox("Selecione o eixo y", dados.columns)
            st.write("### Gr√°fico de Violino:")
            
            figura, ax = plt.subplots(figsize=(largura, altura))

            # Adicionando o gr√°fico de violino
            sns.violinplot(x=dados[eixo_x], y=dados[eixo_y], ax=ax, palette=paletas[paleta_escolhida], inner='box', linewidth=1.25)

            # Ajustando t√≠tulos e r√≥tulos
            ax.set_title(f'Gr√°fico de Violino de {eixo_y} por {eixo_x}', fontsize=16)
            ax.set_xlabel(eixo_x, fontsize=14)
            ax.set_ylabel(eixo_y, fontsize=14)

            # Melhorando a visualiza√ß√£o
            ax.grid(True, linestyle='--', alpha=0.7)  # Adicionando uma grade
            plt.xticks(rotation=45)  # Girando r√≥tulos do eixo x para melhor leitura

            st.pyplot(figura)

        # Gr√°fico de Pizza
        elif grafico_selecionado == "Gr√°fico de Pizza":
            # Selecionar a coluna categ√≥rica
            coluna_categorica = st.sidebar.selectbox("Selecione a coluna categ√≥rica", dados.columns)

            # Op√ß√£o para selecionar uma coluna de valores (opcional)
            coluna_valores = st.sidebar.selectbox("Selecione a coluna de valores (opcional)", [None] + list(dados.select_dtypes(['float64', 'int64']).columns))

            st.write("### Gr√°fico de Pizza:")

            figura, ax = plt.subplots(figsize=(largura, altura))

            if coluna_valores:  # Se uma coluna de valores for selecionada
                # Agrupar os dados pela coluna categ√≥rica e somar os valores correspondentes
                dados_pizza = dados.groupby(coluna_categorica)[coluna_valores].sum()
                # Verificar se a coluna de valores cont√©m valores monet√°rios (R$)
                is_monetary = "R$" in dados.columns or dados_pizza.max() > 1000  # Defini√ß√£o simples para detectar valores financeiros
            else:  # Se nenhuma coluna de valores for selecionada, usar a contagem de cada categoria
                dados_pizza = dados[coluna_categorica].value_counts()
                is_monetary = False  # Se estamos contando categorias, n√£o h√° valores monet√°rios

            # Usar uma paleta de cores
            cores = sns.color_palette(paletas[paleta_escolhida], len(dados_pizza))  # Ajuste a paleta conforme necess√°rio

            # Fun√ß√£o de formata√ß√£o para exibir tanto % quanto valor (formatando se for monet√°rio)
            def func_percent_valor(pct, valores):
                valor = int(pct / 100.0 * sum(valores))
                if is_monetary:
                    return f"{pct:.1f}%\nR${valor:,.0f}"  # Exibir o valor monet√°rio formatado
                else:
                    return f"{pct:.1f}%\n{valor:,}"  # Exibir apenas o valor como quantidade

            # Criar o gr√°fico de pizza
            wedges, texts, autotexts = ax.pie(dados_pizza, 
                                            autopct=lambda pct: func_percent_valor(pct, dados_pizza),  # Chamar a fun√ß√£o de formata√ß√£o
                                            colors=cores, 
                                            startangle=90, 
                                            explode=[0.1] * len(dados_pizza),  # Destacar cada peda√ßo
                                            shadow=True, 
                                            wedgeprops={'edgecolor': 'w', 'linewidth': 0.5})  # Borda branca em cada fatia

            # Ajustar t√≠tulo e r√≥tulos
            if coluna_valores:
                ax.set_title(f'Gr√°fico de Pizza de {coluna_categorica} (Baseado em {coluna_valores})', fontsize=16)
            else:
                ax.set_title(f'Gr√°fico de Pizza de {coluna_categorica}', fontsize=16)

            ax.set_ylabel('')  # Remover o r√≥tulo do eixo Y para limpar o gr√°fico

            # Personalizar os textos das porcentagens
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontsize(12)
                autotext.set_fontweight('bold')

            # Adicionar uma legenda fora do gr√°fico
            ax.legend(dados_pizza.index, title=coluna_categorica, bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=12)

            # Melhorando a visualiza√ß√£o do gr√°fico
            ax.grid(False)  # Remover a grade
            plt.tight_layout()  # Ajuste para n√£o cortar a legenda

            st.pyplot(figura)




 
        # Gr√°fico de √Årea
        elif grafico_selecionado == "Gr√°fico de √Årea":
            eixo_x = st.sidebar.selectbox("Selecione o eixo x", dados.columns)
            eixo_y = st.sidebar.selectbox("Selecione o eixo y", dados.columns)
            st.write("### Gr√°fico de √Årea:")
            
            figura, ax = plt.subplots(figsize=(largura, altura))

            # Verificar se a coluna eixo_y √© num√©rica
            if dados[eixo_y].dtype not in [np.int64, np.float64]:
                st.warning(f"A coluna '{eixo_y}' cont√©m valores n√£o num√©ricos. N√£o √© poss√≠vel gerar o gr√°fico de √°rea.")
            else:
                # Gerar o gr√°fico de √°rea com estilo
                dados.plot.area(x=eixo_x, y=eixo_y, ax=ax, alpha=0.7)  # Ajusta a transpar√™ncia
                ax.set_facecolor("#f7f7f7")  # Cor de fundo mais suave
                
                # Estilizando os r√≥tulos e t√≠tulo
                ax.set_title(f'Gr√°fico de √Årea: {eixo_y} ao longo de {eixo_x}', fontsize=18, fontweight='bold')
                ax.set_xlabel(eixo_x, fontsize=14, fontweight='bold')
                ax.set_ylabel(eixo_y, fontsize=14, fontweight='bold')
                
                # Melhorar a visualiza√ß√£o
                ax.grid(True, linestyle='--', alpha=0.5)  # Grade com estilo
                plt.xticks(rotation=45)  # Girar os r√≥tulos do eixo X para melhor legibilidade

                st.pyplot(figura)


    else:
        st.warning("Nenhum dado carregado. Por favor, fa√ßa o upload de um arquivo CSV ou insira uma URL.")
if __name__ == "__main__":
    principal()
